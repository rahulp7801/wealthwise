"use strict";

function ccc2019() {
// Generated by CoffeeScript 1.7.1

/*
eqHeight.coffee v1.3.5
http://jsliang.github.com/eqHeight.coffee
Copyright (c) 2013-2014, Jui-Shan Liang <jenny@jsliang.com>
All rights reserved.
Licensed under GPL v2.
 */


$.fn.extend({
  eqHeight: function eqHeight(column_selector, option) {
    if (option == null) {
      option = {
        equalize_interval: null,
        break_point: null,
        // BEGIN MODIFICATION
        // Added a max_break_point option so eqHeight would only be applied to window sizes <= max_break_point
        max_break_point: null
        // END MODIFICATION
      };
    }
    return this.each(function () {
      var columns, equalizer, _infinite_equalizing, start_equalizing, timer, _equalize_marked_columns;
      timer = null;
      columns = $(this).find(column_selector);
      if (columns.length === 0) {
        columns = $(this).children();
      }
      if (columns.length === 0) {
        return;
      }
      _equalize_marked_columns = function _equalize_marked_columns() {
        var marked_columns, max_col_height;
        marked_columns = $(".eqHeight_row");
        max_col_height = 0;
        marked_columns.each(function () {
          return max_col_height = Math.max($(this).outerHeight(), max_col_height);
        });
        // Changed .height to .css('height') to make this compatible with jQuery > 1.8. Otherwise .height adds the padding back in automatically.
        marked_columns.css("height", max_col_height);
        return $(".eqHeight_row").removeClass("eqHeight_row");
      };
      equalizer = function equalizer() {
        var row_top_value;
        // Changed .height to .css('height') to make this compatible with jQuery > 1.8. Otherwise .height adds the padding back in automatically.
        columns.css("height", "auto");

        // BEGIN MODIFICATION
        // Added a max_break_point option so eqHeight would only be applied to window sizes <= max_break_point
        if (typeof option.max_break_point === "number" && Modernizr.mq('(min-width: ' + (option.max_break_point + 1) + 'px)')) {
          return;
        } else if (typeof option.break_point === "number" && Modernizr.mq('(max-width: ' + option.break_point + 'px)')) {
          return;
        }
        // END MODIFICATION

        row_top_value = columns.first().position().top;
        columns.each(function () {
          var current_top;
          current_top = $(this).position().top;
          if (current_top !== row_top_value) {
            _equalize_marked_columns();
            row_top_value = $(this).position().top;
          }
          return $(this).addClass("eqHeight_row");
        });
        return _equalize_marked_columns();
      };
      start_equalizing = function start_equalizing() {
        clearTimeout(timer);
        return timer = setTimeout(equalizer, 100);
      };
      _infinite_equalizing = function infinite_equalizing() {
        equalizer();
        return timer = setTimeout(_infinite_equalizing, option.equalize_interval);
      };

      // BEGIN MODIFICATION
      // Begin equalization once immediately when eqHeight is called
      equalizer();

      // Then call it again after the window has fully loaded
      // Changed .load to .on('load' to make this compatible with jQuery > 1.8
      $(window).on('load', equalizer);
      // END MODIFICATION

      if (typeof option.equalize_interval === "number") {
        return _infinite_equalizing();
      } else {
        return $(window).resize(start_equalizing);
      }
    });
  }
});

/* -----------------------------------------
   Local Nav - Child Links Shortened

   Expands/Collapses the shortened child links in the Local Nav.
   Also, toggles the triangle style for the trigger link.
----------------------------------------- */


    $(".collapse-trigger").click(function (e) {
        // Prevent click from collapsing the entire menu in mobile view
        e.preventDefault();
        e.stopPropagation();

        var collapseContent = $(this).next(".collapse");
        var collapseTrigger = $(this).parent('.collapse-panel').find('i');

        if (collapseContent.is(":visible")) {
            // CLOSED STATE
            collapseContent.collapse('hide');
            collapseContent.attr('aria-hidden', 'true');
            collapseTrigger.removeClass('icon-triangle-down').addClass('icon-triangle-right');
            $(this).attr('aria-expanded', 'false');
        } else {
            // OPEN STATE
            collapseContent.collapse('show');
            collapseContent.attr('aria-hidden', 'false');
            collapseTrigger.removeClass('icon-triangle-right').addClass('icon-triangle-down');
            $(this).attr('aria-expanded', 'true');
        }
    });

/* ----------------------------------------------------------------------------------
	localnav2dropdown

	Creates a duplicate of the Local Nav component as a Bootstrap dropdown,
	and places it in the container defined by data-container at the position
	defined by data-position ('top' or 'bottom'). Ex:

	<nav class="local-nav local-nav--responsive" data-container="main-content" data-position="bottom">

---------------------------------------------------------------------------------- */


	var $localNav = $('.local-nav--responsive');
	var localNavTitle = $localNav.find('.child .active').length > 0 ? $localNav.find('.child .active').html() : $localNav.find('.parent.active > span').length > 0 ? $localNav.find('.parent.active > span').html() : $localNav.find('.local-nav-header').html();
	var $localNavBodyCopy = $($localNav.find('> ul')).clone();
	var $responsiveContainer = $('' + $localNav.data('container'));
	var $responsiveSibling = $responsiveContainer.find($localNav.data('sibling'));
	var moveSiblingToTop = $localNav.data('movetotop');
	var responsivePosition = $localNav.data('position');

	// Get the number of menu items
	if ($localNavBodyCopy.length > 0) {
		var countLocalNavItems = $localNavBodyCopy[0].childElementCount;
	}

	// Place localNav only if data-container exists and there's more than one menu item
	if ($responsiveContainer.length > 0 && countLocalNavItems > 1) {
		var $localNavDropdown = $('<div>', {
			'class': 'local-nav--dropdown dropdown local-nav--childlinks-shortened'
		});

		var dropdownButton = '<button id="local-nav--dropdown" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' + localNavTitle + '<span class="local-nav--dropdown__toggle"></span></button>';
		$localNavBodyCopy.addClass('dropdown-menu').attr('aria-labelledby', 'local-nav--dropdown');

		$localNavDropdown.append(dropdownButton, $localNavBodyCopy);

		if (moveSiblingToTop === true) {
			$localNavDropdown.find('.dropdown-menu').prepend($localNavDropdown.find('.active'));
		}

		if (responsivePosition === 'bottom') {
			if ($responsiveSibling.length > 0) {
				$responsiveSibling.before($localNavDropdown);
			} else {
				$responsiveContainer.append($localNavDropdown);
			}
		} else {
			if ($responsiveSibling.length > 0) {
				$responsiveSibling.after($localNavDropdown);
			} else {
				$responsiveContainer.prepend($localNavDropdown);
			}
		}
	}

	/**-----------------------------------------------------------------
  * NAVIGATION
  *
  * Accessibility based on WAI-ARIA Authoring Practices 1.1:
  * https://www.w3.org/TR/wai-aria-practices-1.1/#menu
  *
  * Note: navigation.js does not modify objects in the DOM by adding
  * classes or other markup other than the following three things:
  *
  * 	1. Setting aria-expanded on buttons which open submenus to
  * 	   either true or false to show that the menu is open or
  * 	   closed, respectively.
  *
  * 	2. Changing the tabindex to 0 if an anchor tag or button is
  * 	   focused, or -1 if not (i.e. - "roving tab index").
  *
  *  3. When using the priority plus method of hiding menu items that don't
  * 	   fit within their container, and showing a button to toggle those
  *     items, the following happens:
  *
  * 	   a. The style 'visibility: hidden' and class '.navigation__item--invisible'
  * 		  are added to nav items that don't fit in the container.
  *
  * 	   b. .navigation__item--last-visible is added to the last of the
  * 		  visible nav items.
  *
  * 	   Note: Setting toggle button to display: none will stop menu items
  * 	   from being hidden. In order to hide the toggle button until it's
  * 	   needed, use visibility: hidden instead.
  *
  * Author <Muir Adams - SymSoft Solutions>
  -----------------------------------------------------------------*/

	// JQuery DOM objects

	var $navigationItems = $('.global-header .navigation');
	var $navItemsSubMenuToggles = $('.global-header .navigation__item-link').filter('[aria-haspopup="true"]');
	var $menuToggles = $('.global-header .navigation__toggle');
	var $navItemsSubLinks = $('.global-header .navigation__sub-nav .navigation__sub-nav-item-link');
	// const elementsThatReceiveFocus = 'a, button, input, select, textarea, [tabindex="0"]';

	// Conditional variables (true/false)
	var isTouch = Modernizr.touchevents;

	function isMenuOpen($menuToggle) {
		return $menuToggle.attr('aria-expanded') === 'true';
	}

	function isMegamenuOpen($navigation) {
		var $menuToggle = $navigation.find('.navigation__toggle');

		return isMenuOpen($menuToggle);
	}

	function isHidden($navItem) {
		return $navItem.css('display') === 'none' || $navItem.css('visibility') === 'hidden';
	}

	function isToggleNavigableWithLinks($navLinks) {
		var $firstNavLink = $($navLinks[0]);
		var isTopLevelLinks = $firstNavLink.hasClass('navigation__item-link');
		var $navigation = $firstNavLink.closest('.navigation');
		var $menuToggle = $navigation.find('.navigation__toggle');

		return isTopLevelLinks && !isScreenXS() && !isMegamenuOpen($navigation) && !isHidden($menuToggle);
	}

	function isParentMenuLinkVisible($childLink) {
		return !isHidden($childLink.closest('.navigation__item').find('.navigation__item-link'));
	}

	function setOrientationOfNavList($navList) {
		if (isScreenXS()) {
			$navList.attr('aria-orientation', 'vertical');
		} else if ($navList.width() > $navList.height()) {
			$navList.attr('aria-orientation', 'horizontal');
		} else {
			$navList.attr('aria-orientation', 'vertical');
		}
	}

	function hideUtilityHeader() {
		$('.utility-header').addClass('utility-header--nav-view-all');
	}

	function showUtilityHeader() {
		$('.utility-header').removeClass('utility-header--nav-view-all');
	}

	function openMenu($menuToggle) {
		$menuToggle.attr('aria-expanded', 'true');
		return $menuToggle;
	}

	function closeMenu($menuToggle) {
		$menuToggle.attr('aria-expanded', 'false');
		return $menuToggle;
	}

	function openMegamenu($navigation) {
		var $menuToggle = $navigation.find('.navigation__toggle');
		var $navList = $navigation.find('.navigation__list');

		openMenu($menuToggle);
		setOrientationOfNavList($navList);
	}

	function closeMegamenu($navigation) {
		var $menuToggle = $navigation.find('.navigation__toggle');
		var $navList = $navigation.find('.navigation__list');

		closeMenu($menuToggle);
		closeAllSubMenus($navigation);
		setOrientationOfNavList($navList);
	}

	function openSubMenu($menuToggle) {
		if ($menuToggle.attr('aria-haspopup') === 'true') openMenu($menuToggle);
	}

	function closeSubMenu($menuToggle) {
		var $navItemsSubLinks = $menuToggle.parent().find('.navigation__sub-nav-item-link, .navigation_sub-nav-label-header a');

		unsetTabIndex($navItemsSubLinks);

		if ($menuToggle.attr('aria-haspopup') === 'true') closeMenu($menuToggle);
	}

	function setFocusOnFirstChild($toggle) {
		var $firstChildLink = $(filterVisibleNavLinks($toggle.parent().find('.navigation__sub-nav .navigation__sub-nav-item-link'))[0]);
		$firstChildLink && setTabIndex($firstChildLink).focus();
	}

	// Use this function to automatically open submenus when they're focused by
	// the keyboard, similar to a hover state.
	function autoOpenSubMenu($menuToggle) {
		// if (!isScreenXS()) openSubMenu($menuToggle);
	}

	function closeAllSubMenus($navigation) {
		var $navItemsLinks = $navigation.find('[class^="navigation__item-link"]');
		var $navItemsSubLinks = $navigation.find('.navigation__sub-nav-item-link, .navigation_sub-nav-label-header a');
		var $navItemsSubMenuToggles = $navItemsLinks.filter('[aria-haspopup="true"]');

		closeMenu($navItemsSubMenuToggles);
		unsetTabIndex($navItemsSubLinks);
	}

	function setTabIndex($menuItem) {
		$menuItem.attr('tabindex', '0');
		return $menuItem;
	}

	function unsetTabIndex($menuItem) {
		$menuItem.attr('tabindex', '-1');
		return $menuItem;
	}

	function filterVisibleNavLinks($navLinks) {
		return $navLinks.filter(function () {
			return !isHidden($(this));
		});
	}

	function moveUtilityHeaderLinksToMainNav() {
		var $utilityHeader = $('.utility-header');
		var $utilityItems = $utilityHeader.find('.utility-header__link');
		var $navigationList = $('.navigation--main .navigation__list');
		var $navUtilityItems = $('<div class="navigation__utility-items"></div>');

		$utilityItems.each(function () {
			var $utilityItem = $(this);
			var newEle;

			//ALH: Adjustments in case of Buttons, like for the unauthenticated
			if($utilityItem.is("button")) {
				var clickHref = $utilityItem.attr('ng-click');
					clickHref = clickHref.substring(24, clickHref.length-1);

				newEle = $('<a></a>')
					.attr({ href: clickHref })
					.text( $utilityItem.text().trim() )
					.addClass('navigation__item-link-utility');
			} else {
				newEle = $utilityItem.clone().removeClass('utility-header__link').addClass('navigation__item-link-utility')
			}
			newEle.find('.sr-only, .badge').remove(); //ALH: pruning potential fat

			var	$newNavItem = $('<div class="navigation__utility-item"></div>').append(newEle);
			$navUtilityItems.append($newNavItem);
		});

		$navigationList.append($navUtilityItems);
	}

	function debounce(func, wait, immediate) {
		var timeout;
		return function () {
			var context = this,
			    args = arguments;
			var later = function later() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};

	/**-----------------------------------------------------------------
  *
  * 	INITIAL SETUP & WINDOW RESIZE EVENTS
  *
  -----------------------------------------------------------------*/

	// iOS triggers resize event on scroll, so we need to check to be sure the
	// window actually resized vs the original size.
	var originalWindowWidth = window.innerWidth;

	// Hide any nav items that overflow the container
	var hideOverflowNavItems = debounce(function () {
		$navigationItems.each(function (index, navigation) {
			var $navigation = $(navigation);
			var $navItemsLinks = $navigation.find('.navigation__item-link');

			// Don't hide overflow items if the menu toggle is set to display: none
			if ($navItemsLinks.closest('.navigation').find('.navigation__toggle').css('display') === 'none') return;

			var $menuToggle = $navigation.find('.navigation__toggle');
			var $navItems = $navigation.find('.navigation__item');

			// Reset toggle and all nav items to not be hidden
			$menuToggle.css({ 'visibility': 'visible', 'width': '', 'padding': '' });
			$menuToggle.addClass('navigation__toggle-open');
			showUtilityHeader();

			$navItems.each(function (index, navItem) {
				var $navItem = $(navItem);
				var $navItemLink = $navItem.find('.navigation__item-link');
				$navItem.css('visibility', '');
				$navItem.removeClass('navigation__item--last-visible');
				$navItem.removeClass('navigation__item--invisible');
				$navItemLink.css({ 'width': '', 'padding': '' });
			});

			// No need to hide items if the navigation isn't visible
			if (isHidden($navigation.find('.navigation__list'))) return;

			// Only hide nav items on SM+
			if (!isScreenXS()) {
				var navWidth = $navigation.width() - 300 - 133 - 30; //ALH: Accounts to logo size diff
				var menuToggleWidth = $menuToggle.outerWidth();
				var navItemsWidth = 0;
				var foundLastVisible = false;

				$navItems.each(function (index, navItem) {
					var isLastItem = index === $navItems.length - 1;
					var $navItem = $(navItem);
					var navItemWidth = $navItem.outerWidth();
					navItemsWidth += navItemWidth;

					if (!isLastItem && navItemsWidth + menuToggleWidth > navWidth || // It's not the last item, but all the items and the menuToggle wouldn't fit OR
					isLastItem && (foundLastVisible || navItemsWidth > navWidth)) {
						// It's the last item, and either all the items won't fit or we're already showing the menuToggle
						var $navItemLink = $navItem.find('.navigation__item-link');

						if (!foundLastVisible && index > 0) {
							var $prevNavItem = $($navItems[index - 1]);
							$prevNavItem.addClass('navigation__item--last-visible');
							foundLastVisible = true;
						}

						$navItem.css('visibility', 'hidden');
						$navItem.addClass('navigation__item--invisible');
						$navItemLink.css({ 'width': '0', 'padding': '0' });

						if (index === $navItems.length - 1) {
							$menuToggle.css('visibility', 'visible');
							$menuToggle.addClass('navigation__toggle-open');
							//$menuToggle.css({ 'width': '', 'padding': '' });
							$menuToggle.css({ 'width': 'auto', 'padding': '12px 62px 1px 0' });
							hideUtilityHeader();
						}
					} else if (index === $navItems.length - 1) {
						// Hide the toggle button if all the nav items fit within the container
						$menuToggle.css('visibility', 'hidden');
						$menuToggle.removeClass('navigation__toggle-open');
						$menuToggle.css({ 'width': '0', 'padding': '0' });
						showUtilityHeader();

						if ($menuToggle.attr('tabindex') === 0) {
							setTabIndex($(filterVisibleNavLinks($navItems)[0]));
						}
					}
				});
			}
		});
	}, 200);

	moveUtilityHeaderLinksToMainNav();

	// setTimeout gives the initial CSS time to load before hiding the overflow items
	// setTimeout(hideOverflowNavItems, 200); // Not needed when hideOverflowNavItems has a debounce of at least 200
	hideOverflowNavItems(); // Use this instead of the one above when hideOverflowNavItems has a debounce of at least 200

	// Move the tabindex focus from the nav items to the toggle button if on mobile
	if (isScreenXS()) {
		$navigationItems.each(function (index, navigation) {
			var $navigation = $(navigation);
			var $navList = $navigation.find('.navigation__list');

			setTabIndex($navigation.find('.navigation__toggle'));
			setOrientationOfNavList($navList);
		});
	}

	// Update where the tabindex is focused when user switches between mobile and desktop views
	$(window).resize(function () {
		// iOS triggers resize event on scroll, so we need to check to
		// be sure the window actually resized.
		var currentWindowWidth = window.innerWidth;

		// The window resized
		if (currentWindowWidth != originalWindowWidth) {
			originalWindowWidth = currentWindowWidth;

			$navigationItems.each(function (index, navigation) {
				var $navigation = $(navigation);
				var $menuToggle = $navigation.find('.navigation__toggle');
				var $navItemLinks = $navigation.find('[class^="navigation__item-link"]');

				if (isScreenXS()) {
					var $navList = $navigation.find('.navigation__list');
					hideOverflowNavItems();

					$menuToggle.css('visibility', '');
					setTabIndex($menuToggle);
					setOrientationOfNavList($navList);
				} else {
					closeMegamenu($navigation);
					hideOverflowNavItems();

					var $navItemLinksVisible = filterVisibleNavLinks($navItemLinks);

					if ($navItemLinksVisible.length > 0) {
						setTabIndex($navItemLinksVisible.first());
					}
				}
			});
		}
	});

	/**-----------------------------------------------------------------
  *
  * 	MOUSE & TOUCH EVENTS
  *
  -----------------------------------------------------------------*/

	function closeMenuOnClickOutside(event) {
		var $clickTarget = $(event.target);
		var $clickedNavigation = $clickTarget.closest('.navigation');
		var clickedNavigationName = $clickedNavigation.attr('aria-label');

		$navigationItems.each(function (index, navigation) {
			var $navigation = $(navigation);

			if (!($navigation.attr('aria-label') === clickedNavigationName)) {
				if (isMegamenuOpen($navigation)) {
					// const $menuToggle = $navigation.find('.navigation__toggle');

					// if (!isHidden($menuToggle)) {
					// 	setTabIndex($menuToggle);

					// 	// If user didn't click on an element that can receive focus, then put the focus
					// 	// on the toggle of the menu that was just closed.
					// 	if (!$clickTarget.is(elementsThatReceiveFocus) &&
					// 		$clickTarget.closest(elementsThatReceiveFocus).length === 0) {

					// 		$menuToggle.focus();
					// 	}
					// 	// The above is commented out, because if the user is clicking with the mouse
					// 	// then focus doens't always have to be shown. Focus is mainly for keyboard users.
					// }

					closeMegamenu($navigation);
				} else {
					var $openSubMenuToggle = $navigation.find('.navigation__item-link[aria-expanded="true"]');

					// Is a submenu open even though the megamenu isn't? Ex: when the sub menu is visible on LG
					if ($openSubMenuToggle.length > 0) {
						closeSubMenu($openSubMenuToggle);
						// setTabIndex($openSubMenuToggle)

						// If user didn't click on an element that can receive focus, then put the focus
						// on the toggle of the menu that was just closed.
						// if (!$clickTarget.is(elementsThatReceiveFocus) &&
						// 	$clickTarget.closest(elementsThatReceiveFocus).length === 0) {

						// 	$openSubMenuToggle.focus();
						// }
					}
				}
			}
		});
	}

	function closeMenuOnClickLink(event) {
		var $clickTarget = $(event.target);
		var $navigation = $clickTarget.closest('.navigation');
		// const $menuToggle = $navigation.find('.navigation__toggle');

		if ($clickTarget.is('a')) {
			if (isMegamenuOpen($navigation)) {
				setTimeout(function () {
					closeMegamenu($navigation);
				}, 1000);
				// if (!isHidden($menuToggle)) setTabIndex($menuToggle);
			} else {
				var $openSubMenuToggle = $navigation.find('.navigation__item-link[aria-expanded="true"]');

				// Is a submenu open even though the megamenu isn't? Ex: when the sub menu is visible on LG
				if ($openSubMenuToggle.length > 0) {
					setTimeout(function () {
						closeSubMenu($openSubMenuToggle);
						// unsetTabIndex($openSubMenuToggle);
					}, 1000);
				}
			}
		}
	}

	// Toggle the menu when user clicks the toggle button
	$menuToggles.on('click', function (event) {
		var $clickTarget = $(event.target);
		var $navigation = $clickTarget.closest('.navigation');

		if (isMegamenuOpen($navigation)) {
			closeMegamenu($navigation);
			// setTabIndex($clickTarget).focus();
		} else {
			openMegamenu($navigation);
			// setTabIndex($clickTarget).focus();
		}

		event.preventDefault();
	});

	// Toggle the sub menu when user clicks the sub menu toggle button
	$navItemsSubMenuToggles.on('click', function (event) {
		var $menuToggle = $(this);

		if (isMenuOpen($menuToggle)) {
			closeSubMenu($menuToggle);
			// setTabIndex($menuToggle).focus();
		} else {
			// Close all other open submenus
			var $allMenuToggles = $menuToggle.closest('.navigation__list').find('.navigation__item-link');

			$allMenuToggles.each(function () {
				closeSubMenu($(this));
				// unsetTabIndex($(this));
			});

			// Now open the clicked submenu
			openSubMenu($menuToggle);
			// setTabIndex($menuToggle);
			setFocusOnFirstChild($menuToggle);
		}

		event.preventDefault();
	});

	// Close menu if user clicked/touched outside the menu or on a link
	if (isTouch) {
		// iOS scrolling fires touchstart --> touchmove --> touchend,
		// and we need to be sure we're not registering a scroll as a click.
		var documentClick = void 0;

		$(document).on('touchstart', function () {
			documentClick = true;
		});

		$(document).on('touchmove', function () {
			documentClick = false;
		});

		$(document).on('click touchend', function (event) {
			if (event.type == "click") documentClick = true;
			if (documentClick) {
				closeMenuOnClickOutside(event);
				closeMenuOnClickLink(event);
			}
		});
	} else {
		$(document).on('click', function (event) {
			closeMenuOnClickOutside(event);
			closeMenuOnClickLink(event);
		});
	}

	// If the page includes the settings bar with buttons to increase and decrease the
	// size of the text, then perform a calculation about whether or not to hide any of the
	// nav items after the text has been resized.
	$('.resetTextSize, .increaseTextSize, .decreaseTextSize').on('click', function () {
		hideOverflowNavItems();
	});

	/**-----------------------------------------------------------------
  *
  * 	KEYBOARD EVENTS
  *
  -----------------------------------------------------------------*/

	// Keycodes
	var tabKey = 9;
	var enterKey = 13;
	var spaceKey = 32;
	var escKey = 27;
	var downArrowKey = 40;
	var upArrowKey = 38;
	var leftArrowKey = 37;
	var rightArrowKey = 39;
	var homeKey = 36;
	var endKey = 35;

	function moveFocusToFirstItem($navLinks) {
		var $firstNavItemLink = $($navLinks[0]);

		// Move to the first navItem
		setTabIndex($firstNavItemLink).focus();

		// Open navItem's submenu if it has one
		autoOpenSubMenu($firstNavItemLink);
	}

	function moveFocusToLastItem($navLinks) {
		var $menuToggle = $navLinks.closest('.navigation').find('.navigation__toggle');

		if (isToggleNavigableWithLinks($navLinks)) {
			// Move to the toggle button if it's visible
			setTabIndex($menuToggle).focus();
		} else {
			var $lastNavItemLink = $($navLinks[$navLinks.length - 1]);

			// Move to the last navItem
			setTabIndex($lastNavItemLink).focus();

			// Open navItem's submenu if it has one
			autoOpenSubMenu($lastNavItemLink);
		}
	}

	function moveFocusToNextItem($navLinks, event) {
		var $menuToggle = $navLinks.closest('.navigation').find('.navigation__toggle');
		var $visibleNavLinks = filterVisibleNavLinks($navLinks);

		$visibleNavLinks.each(function (index, navItemLink) {

			if (navItemLink === event.target) {
				var $navItemLink = $(navItemLink);
				unsetTabIndex($navItemLink);

				// Close navItem's submenu if it has one
				if (!isScreenXS()) closeSubMenu($navItemLink);

				// If it's the last navItem then...
				if (index === $visibleNavLinks.length - 1) {

					if (isToggleNavigableWithLinks($navLinks)) {
						// Move to the toggle button if it's visible
						setTabIndex($menuToggle).focus();
					} else {
						closeSubMenu($menuToggle);
						setTabIndex($menuToggle).focus();
					}
				} else {
					var $nextNavItemLink = $($visibleNavLinks[index + 1]);

					// Move tabindex to the next navItem
					setTabIndex($nextNavItemLink).focus();

					// Open navItem's submenu if it has one
					autoOpenSubMenu($nextNavItemLink);
				}
			}
		});

		// Prevents scrolling when down arrow key is pressed
		event.preventDefault();
	}

	function moveFocusToPreviousItem($navLinks, event) {
		var $visibleNavLinks = filterVisibleNavLinks($navLinks);

		$visibleNavLinks.each(function (index, navItemLink) {

			if (navItemLink === event.target) {
				var $navItemLink = $(navItemLink);
				unsetTabIndex($navItemLink);

				// Close navItem's submenu if it has one
				if (!isScreenXS()) closeSubMenu($navItemLink);

				// If it's the first navItem then...
				if (index === 0) {
					moveFocusToLastItem($visibleNavLinks);
				} else {
					var $prevNavItemLink = $($visibleNavLinks[index - 1]);
					// Move tabindex to the previous navItem
					setTabIndex($prevNavItemLink).focus();

					// Open navItem's submenu if it has one
					autoOpenSubMenu($prevNavItemLink);
				}
			}
		});

		// Prevents scrolling when down arrow key is pressed
		event.preventDefault();
	}

	function moveFocusToNextItemThatMatchesCharacter($navLinks, event) {
		var $navLinksArray = filterVisibleNavLinks($navLinks).slice(0); // Clone the array
		var $menuToggle = $navLinks.closest('.navigation').find('.navigation__toggle');

		if (isToggleNavigableWithLinks($navLinks)) $navLinksArray.push($menuToggle[0]);

		$navLinksArray.each(function (index, navItemLink) {
			if (navItemLink === event.target) {
				// Find the currently focused item
				var $navItemLink = $(navItemLink);

				for (var i = 1; i < $navLinksArray.length + 1; i++) {
					var indexToSearch = (index + i) % $navLinksArray.length;
					var $thisNavItem = $($navLinksArray[indexToSearch]);
					var firstLetter = $thisNavItem.text().replace(/[^0-9a-z]/gi, '').charCodeAt(0);
					var pressedKey = event.which;

					if (pressedKey === firstLetter) {
						unsetTabIndex($navItemLink);
						closeSubMenu($navItemLink);
						setTabIndex($thisNavItem).focus();
						if (!isToggleNavigableWithLinks($navLinks)) {

							autoOpenSubMenu($thisNavItem);
						}
						break;
					}
				}
			}
		});
	}

	// MEGAMENU TOGGLE BUTTON
	$menuToggles.on('keydown', function (event) {
		var $menuToggle = $(this);
		var $navigation = $menuToggle.closest('.navigation');
		var pressedKey = event.which;

		// Find all item-links that either are visible or will be once the menu is opened.
		var $navItemsLinksVisible = $navigation.find('[class^="navigation__item-link"]').filter(function () {
			return $(this).css('display') !== 'none';
		});

		// If there still aren't any item-links to navigate to then navigate to any
		// sub-nav-item-links that aren't going to be hidden.
		if ($navItemsLinksVisible.length === 0) {
			$navItemsLinksVisible = $navigation.find('.navigation__sub-nav-item-link, .navigation_sub-nav-label-header a').filter(function () {
				return $(this).css('display') !== 'none';
			});
		}

		// Open the menu when focus is on toggleButton & user presses enter, space, or down/up key
		if (pressedKey === enterKey || pressedKey === spaceKey || pressedKey === downArrowKey || pressedKey === upArrowKey) {
			openMegamenu($navigation);

			if (pressedKey === upArrowKey) {
				var $lastNavItemLink = $navItemsLinksVisible.last();

				// 100ms delay allows animation to happen before switching focus
				setTimeout(function () {
					setTabIndex($lastNavItemLink).focus();
				}, 100);

				// Open navItem's submenu if it has one
				if (!isScreenXS()) openSubMenu($lastNavItemLink);
			} else {
				var $firstNavItemLink = $navItemsLinksVisible.first();

				// 100ms delay allows animation to happen before switching focus
				setTimeout(function () {
					setTabIndex($firstNavItemLink).focus();
				}, 100);

				// Open navItem's submenu if it has one
				if (!isScreenXS()) openSubMenu($firstNavItemLink);
			}

			// Prevents scrolling when space key is pressed
			event.preventDefault();
		}

		if (!isScreenXS()) {
			if (pressedKey === rightArrowKey || pressedKey === homeKey) {
				// Find nav links that aren't also set to visibility: hidden due to priority plus
				var $navItemsVisible = filterVisibleNavLinks($navItemsLinksVisible);

				// Only move to a nav item link if one is visible
				if ($navItemsVisible.length > 0) {
					// Move focus to first navItem
					setTabIndex($($navItemsVisible[0])).focus();
				}

				event.preventDefault();
			}

			if (pressedKey === endKey) {
				event.preventDefault();
			}

			if (pressedKey === leftArrowKey) {
				// Find nav links that aren't also set to visibility: hidden due to priority plus
				var _$navItemsVisible = filterVisibleNavLinks($navItemsLinksVisible);

				// Only move to a nav item link if one is visible
				if (_$navItemsVisible.length > 0) {
					// Move focus to last navItem
					setTabIndex($(_$navItemsVisible[_$navItemsVisible.length - 1])).focus();
				}
			}
		}

		if (isToggleNavigableWithLinks($navItemsLinksVisible)) {
			// Moves focus to the next item having a name that starts with the typed character
			if (pressedKey >= 48 && pressedKey <= 57 || // 0 - 9
			pressedKey >= 65 && pressedKey <= 90) {
				// a - z

				moveFocusToNextItemThatMatchesCharacter($navItemsLinksVisible, event);
			}
		}
	});

	// TOP LEVEL LINKS
	$('.navigation').on('keydown', '[class^="navigation__item-link"]', function (event) {
		var $thisNavItemLink = $(this);
		var $navigation = $thisNavItemLink.closest('.navigation');
		var $menuToggle = $navigation.find('.navigation__toggle');
		var $navItemsLinks = $navigation.find('[class^="navigation__item-link"]');
		if (!isMegamenuOpen($navigation)) {
            $navItemsLinks.push($menuToggle);
        }
		var $navItemsLinksVisible = filterVisibleNavLinks($navItemsLinks);
		var pressedKey = event.which;

		if (pressedKey === homeKey) {
			closeSubMenu($thisNavItemLink);
			moveFocusToFirstItem($navItemsLinksVisible);
			event.preventDefault();
		}

		if (pressedKey === endKey) {
			closeSubMenu($thisNavItemLink);
			moveFocusToLastItem($navItemsLinksVisible);
			event.preventDefault();
		}

		if (pressedKey === escKey ) {
			if (isMegamenuOpen($navigation)) {
				closeMegamenu($navigation);
				setTabIndex($menuToggle).focus();
			} else {
				var $parentNavItemLink = $thisNavItemLink.closest('.navigation__item').find('.navigation__item-link');
				closeSubMenu($thisNavItemLink);
				moveFocusToNextItem($navItemsLinksVisible, event);
				event.preventDefault();
			}
		}

		if (pressedKey === tabKey) {
			if (isMegamenuOpen($navigation)) {
				if(event.shiftKey) {
					moveFocusToPreviousItem($navItemsLinksVisible, event);
				} else {
					moveFocusToNextItem($navItemsLinksVisible, event);
				}
			}
		}

		// Moves focus to the next item having a name that starts with the typed character
		if (pressedKey >= 48 && pressedKey <= 57 || // 0 - 9
		pressedKey >= 65 && pressedKey <= 90) {
			// a - z
			moveFocusToNextItemThatMatchesCharacter($navItemsLinksVisible, event);
		}

		if ((pressedKey === enterKey || pressedKey === spaceKey)
			&& ($thisNavItemLink.hasClass('navigation__item-link') || ($thisNavItemLink.hasClass('navigation__item-link-utility')))
			&& ($thisNavItemLink[0].href !== undefined && $thisNavItemLink[0].href !== '')
			) {
				window.location.href = $thisNavItemLink[0].href;
		}

		// Move tabindex down the list
		if ( isScreenXS() && pressedKey === downArrowKey ||
			!isScreenXS() && isMegamenuOpen($navigation) && (pressedKey === downArrowKey)  ||
			!isScreenXS() && !isMegamenuOpen($navigation) && pressedKey === rightArrowKey) {

			moveFocusToNextItem($navItemsLinksVisible, event);

		} else if (	pressedKey === enterKey || pressedKey === spaceKey || isScreenXS() && pressedKey === rightArrowKey ||
					!isScreenXS() && isMegamenuOpen($navigation) && pressedKey === rightArrowKey ||
					!isScreenXS() && !isMegamenuOpen($navigation) && pressedKey === downArrowKey) {

			// Move tab index down onto first child link in sub nav
			if ($thisNavItemLink.attr('aria-haspopup') === 'true') {
				openMenu($thisNavItemLink);
				setFocusOnFirstChild($thisNavItemLink);
			}

			// Prevents scrolling when space or down arrow key is pressed
			event.preventDefault();
		} else if (pressedKey === upArrowKey || pressedKey === downArrowKey) {
			event.preventDefault();
		}

		// Move tabindex up the list
		if ( isScreenXS() && pressedKey === upArrowKey ||
			!isScreenXS() && isMegamenuOpen($navigation) && pressedKey === upArrowKey ||
			!isScreenXS() && !isMegamenuOpen($navigation) && pressedKey === leftArrowKey) {

			moveFocusToPreviousItem($navItemsLinksVisible, event);
		} else if (	isScreenXS() && pressedKey === leftArrowKey ||
					!isScreenXS() && isMegamenuOpen($navigation) && pressedKey === leftArrowKey ||
					!isScreenXS() && !isMegamenuOpen($navigation) && pressedKey === upArrowKey) {

			// Move tab index down onto last child link in sub nav
			if ($thisNavItemLink.attr('aria-haspopup') === 'true') {
				openMenu($thisNavItemLink);
				setFocusOnFirstChild($thisNavItemLink);

				// Prevents scrolling when down arrow key is pressed
				event.preventDefault();
			}
		} else if (pressedKey === upArrowKey || pressedKey === downArrowKey) {
			event.preventDefault();
		}
	});

	// SUB MENU LINKS
	$navItemsSubLinks.on('keydown', function (event) {
		var $thisNavItemLink = $(this);
		var $navigation = $thisNavItemLink.closest('.navigation');
		var $menuToggle = $navigation.find('.navigation__toggle');
		var pressedKey = event.which;
		var $navSubLinks = void 0;

		// Overriden with logic below to play nice with different subnav links
		// if (isParentMenuLinkVisible($thisNavItemLink)) {
		// 	$navSubLinks = filterVisibleNavLinks($thisNavItemLink.closest('.navigation__sub-nav').find('a'));
		// } else {
		// 	// Find all other sub-nav-item-links in the navigation
		// 	$navSubLinks = filterVisibleNavLinks($navigation.find('.navigation__sub-nav-item-link, .navigation_sub-nav-label-header a'));
		// }

		$navSubLinks = filterVisibleNavLinks($navigation.find('.navigation__sub-nav-item-link, .navigation_sub-nav-label-header a')).filter(function () { return $(this).parent('.navigation__sub-nav-item.hidden').length === 0 && !this.disabled });

		if (pressedKey === escKey) {
			var $subNavToggle = $thisNavItemLink.closest('.navigation__item').find('.navigation__item-link');

			if (!isHidden($subNavToggle)) {
				closeSubMenu($subNavToggle);
				setTabIndex($subNavToggle).focus();
				autoOpenSubMenu($subNavToggle);
			} else {
				setTabIndex($menuToggle).focus();
				closeMegamenu($navigation);
			}
		}

		if (pressedKey === tabKey) {
			// assumes we have focus on submenu/child items
			if (event.shiftkey) {
				moveFocusToPreviousItem($navSubLinks, event);
			} else {
				moveFocusToNextItem($navSubLinks, event);
			}
		}

		if (pressedKey === homeKey) {
			moveFocusToFirstItem($navSubLinks);
			event.preventDefault();
		}

		if (pressedKey === endKey) {
			moveFocusToLastItem($navSubLinks);
			event.preventDefault();
		}

		// Moves focus to the next item having a name that starts with the typed character
		if (pressedKey >= 48 && pressedKey <= 57 || // 0 - 9
		pressedKey >= 65 && pressedKey <= 90) {
			// a - z

			moveFocusToNextItemThatMatchesCharacter($navSubLinks, event);
		}

		// Move tabindex down the list
		if (pressedKey === downArrowKey || pressedKey === rightArrowKey) {
			moveFocusToNextItem($navSubLinks, event);
		}

		// Move tabindex up the list
		if (pressedKey === upArrowKey || pressedKey === leftArrowKey) {
			moveFocusToPreviousItem($navSubLinks, event);
		}

		if (pressedKey === spaceKey) event.preventDefault();
	});


    /**-----------------------------------------------------------------
     * NAVIGATION - Global
     *
     * Sets height of global navigation to the page height.
     *
     * Author <Muir Adams - SymSoft Solutions>
     -----------------------------------------------------------------*/

    // JQuery DOM objects

    var $globalNavigationList = $('.navigation--global .navigation__list');

    // iOS triggers resize event on scroll, so we need to check to be sure the
    // window actually resized vs the original size.
    var originalPageWidth = window.innerWidth;

    function setNavigationHeight() {
        var utilityHeight = $('.utility-header').outerHeight();
        var navHeight = $(document).height() - utilityHeight;
        $globalNavigationList.css('height', navHeight);
    }

    if (!isScreenXS()) {
        setNavigationHeight();
    }

    // Update the height of the navigation if the window resizes
    $(window).resize(function () {
        // iOS triggers resize event on scroll, so we need to check to
        // be sure the window actually resized.
        var currentPageWidth = window.innerWidth;

        // The window resized
        if (currentPageWidth != originalPageWidth) {
            // First reset the navigation height in case it's longer than the document
            $globalNavigationList.css('height', '');

            if (!isScreenXS()) {
                originalPageWidth = currentPageWidth;
                setNavigationHeight();
            }
        }
    });

    // Prepend global navigation with a div that acts as an overlay
    $globalNavigationList.parent().append('<div class="navigation__overlay"></div>');


    /**-----------------------------------------------------------------
     * Responsive Tables
     *
     * This makes all tables within rich-text responsive by adding
        * a wrapper around the table with .table-resonsive class, and it
        * adds the class .table to the table so it takes on the proper
        * styling.
        *
        * NOTE: This function does not make tables accessible. That has
        * to be done manually.
     *
     * Author <Muir Adams - SymSoft Solutions>
     -----------------------------------------------------------------*/

    var $richText = $('.rich-text');

    if ($richText.length > 0) {
        var $tables = $richText.find('table');

        $tables.each(function () {
            var $table = $(this);

            if (!$table.hasClass('table')) $table.addClass('table');
            if (!$table.parent().hasClass('table-responsive')) $table.wrap('<div class="table-responsive"></div>');
        });
    }

/* ----------------------------------------------------------------------------------
	Scrolling Carousel

---------------------------------------------------------------------------------- */

	var slider = document.getElementById('scrolling-carousel__slider');
	var carousel = document.getElementById('scrolling-carousel__slides-scroll-container');

	if (slider && carousel) {

		// Update the current slider value (each time you drag the slider handle)
		var updateCarouselScrollPosition = function updateCarouselScrollPosition(event) {
			var maxScrollLeft = carousel.scrollWidth - carousel.clientWidth;
			carousel.scrollLeft = maxScrollLeft * (event.target.value / 100);
		};

		var updateSliderPosition = function updateSliderPosition() {
			var maxScrollLeft = carousel.scrollWidth - carousel.clientWidth;
			slider.value = carousel.scrollLeft / maxScrollLeft * 100;
		};

		// Initialize IE9- Range Slider Polyfill, b/c input[type="range"] is only in IE10+
		$(slider).rangeslider({ polyfill: true }); // Setting polyfill to false makes it appear in all browsers

		// Set initial scroll-position of carousel images
		carousel.scrollLeft = slider.value;

		slider.oninput = updateCarouselScrollPosition;
		slider.onchange = updateCarouselScrollPosition; // Use for IE

		carousel.addEventListener('scroll', function () {
			updateSliderPosition();
		});

		// iOS triggers resize event on scroll, so we need to check to be sure the
		// window actually resized vs the original size.
		var originalPageWidth = window.innerWidth;

		// Update the height of the navigation if the window resizes
		$(window).resize(function () {
			// iOS triggers resize event on scroll, so we need to check to
			// be sure the window actually resized.
			var currentPageWidth = window.innerWidth;

			// The window resized
			if (currentPageWidth != originalPageWidth) {
				originalPageWidth = currentPageWidth;
				updateSliderPosition();
			}
		});
	}

	/**-----------------------------------------------------------------
  * SITE SEARCH
  *
  * Site Search as two parts:
  * 1. Toggling the site search between visible and hidden.
  * 2. Changing the scroll position when the search is dynamic. (see bottom)
  *
  * Note: site-search.js does not modify objects in the DOM by adding
  * classes or other markup other than the following four things:
  *
  * 	1. Setting aria-expanded on the toggle depending upon whether
  * 	   the search field is expanded or not.
  *
  *  2. Setting aria-haspopup on the toggle depending upon whether
  * 	   or not the search field is always visible or not.
  *
  * 	3. Setting the toggle button to display:block if it should be
  * 	   shown.
  *
  * 	4. Changing the tabindex to 0 if an anchor tag or button is
  * 	   focused, or -1 if not (i.e. - "roving tab index").
  *
  * Author <Muir Adams - SymSoft Solutions>
  -----------------------------------------------------------------*/
	$('.site-search').each(function () {
		var $this = $(this);

		// JQuery DOM objects
		var $siteSearchToggle = $this.find('button.site-search__toggle');
		var $siteSearchForm = $this.find('.site-search__form');
		var $siteSearchInput = $siteSearchForm.find('input');
		var $siteSearchButton = $siteSearchForm.find('button');
		var elementsThatReceiveFocus = 'a, button, input, select, textarea, [tabindex="0"]';

		// Conditional variables (true/false)
		var isTouch = Modernizr.touchevents;
		var isFormHiddenDefault = $siteSearchToggle.hasClass('site-search__toggle-form-hidden-default');

		function isMenuOpen() {
			return $siteSearchToggle.attr('aria-expanded') === 'true';
		}

		function isSiteSearchFormVisible() {
			return $siteSearchForm.is(':visible');
		}

		function doesSiteSearchFormFit() {
			var $globalHeader = $('.global-header');
			var globalHeaderWidth = $globalHeader.width();
			var globalHeaderChildren = $globalHeader.children();
			var childrenTotalWidth = 0;

			globalHeaderChildren.each(function (index, child) {
				childrenTotalWidth += $(child).outerWidth(true);
			});
			if (childrenTotalWidth < globalHeaderWidth) return true;

			return false;
		}

		function openMenu() {
			$siteSearchToggle.attr('aria-expanded', 'true');
			preventScrolling();
			return $siteSearchToggle;
		}

		function closeMenu() {
			$siteSearchToggle.attr('aria-expanded', 'false');
			enableScrolling();
			return $siteSearchToggle;
		}

		function preventScrolling() {
			$('html').addClass('stop-scrolling');
			$('html').bind('touchmove', function (e) {
				e.preventDefault();
			}); // for mobile
		}

		function enableScrolling() {
			$('html').removeClass('stop-scrolling');
			$('html').unbind('touchmove'); // for mobile
		}

		function showToggle() {
			$siteSearchToggle.attr('aria-haspopup', 'true');
			$siteSearchToggle.attr('aria-expanded', 'false');
			$siteSearchToggle.css('display', 'block');
		}

		function hideToggle() {
			$siteSearchToggle.removeAttr('aria-haspopup');
			$siteSearchToggle.removeAttr('aria-expanded');
			$siteSearchToggle.css('display', 'none');
		}

		function setTabIndex($menuItem) {
			$menuItem.attr('tabindex', '0');
			return $menuItem;
		}

		function unsetTabIndex($menuItem) {
			$menuItem.attr('tabindex', '-1');
			return $menuItem;
		}

		function clearTabIndex($menuItem) {
			$menuItem.removeAttr('tabindex');
			return $menuItem;
		}

		function setDialogRole() {
			// Only set dialog role if search bar is in the header
			if ($siteSearchForm.closest('.global-header').length > 0) {
				$siteSearchForm.attr('role', 'dialog');
			}
		}

		function unsetDialogRole() {
			$siteSearchForm.removeAttr('role');
		}

   /**-----------------------------------------------------------------
	*
	* 	WINDOW RESIZE EVENTS
	*
	-----------------------------------------------------------------*/

		// iOS triggers resize event on scroll, so we need to check to be sure the
		// window actually resized vs the original size.
		var originalWindowWidth = window.innerWidth;

		// Move the tabindex focus from the nav items to the toggle button if on mobile
		if (isScreenXS() && !isSiteSearchFormVisible()) {
			setDialogRole();
			unsetTabIndex($siteSearchInput);
			unsetTabIndex($siteSearchButton);
			setTabIndex($siteSearchToggle);
			showToggle();
		} else if (!isSiteSearchFormVisible()) {
			setDialogRole();
			showToggle();
		} else if (!doesSiteSearchFormFit()) {
			setDialogRole();
			showToggle();
		}

		// Update where the tabindex is focused when user switches between mobile and desktop views
		$(window).resize(function () {
			// iOS triggers resize event on scroll, so we need to check to
			// be sure the window actually resized.
			var currentWindowWidth = window.innerWidth;

			// The window resized
			if (currentWindowWidth != originalWindowWidth) {
				originalWindowWidth = currentWindowWidth;

				if (isScreenXS()) {
					if (!isMenuOpen()) {
						setTabIndex($siteSearchToggle);
						showToggle();
						setDialogRole();

						if (!isSiteSearchFormVisible()) {
							setTimeout(function () {
								unsetTabIndex($siteSearchInput);
								unsetTabIndex($siteSearchButton);
							}, 1000);
						}
					}
				} else {
					closeMenu();
					hideToggle();

					if (isSiteSearchFormVisible()) {
						if (!doesSiteSearchFormFit() || isFormHiddenDefault) {
							setDialogRole();
							showToggle();
						} else {
							clearTabIndex($siteSearchToggle);
							clearTabIndex($siteSearchInput);
							clearTabIndex($siteSearchButton);
							unsetDialogRole();
							hideToggle();
						}
					} else {
						showToggle();
						setDialogRole();
					}
				}
			}
		});

		/**-----------------------------------------------------------------
   *
   * 	MOUSE & TOUCH EVENTS
   *
   -----------------------------------------------------------------*/

		function closeMenuOnClickOutside(event) {
			if (isMenuOpen()) {
				var $clickTarget = $(event.target);
				var _$siteSearchForm = $('#site-search-form');
				var didClickOutsideSiteSearch = $clickTarget.closest($('#site-search-form, .site-search__toggle')).length === 0;
				var didClickOutsideSiteSearchForm = event.offsetY > _$siteSearchForm[0].clientHeight;

				if (isTouch && event.type !== 'click') {
					var rect = event.target.getBoundingClientRect();
					var touchPositionY = event.originalEvent.changedTouches[0].pageY - rect.top;

					didClickOutsideSiteSearchForm = touchPositionY > _$siteSearchForm[0].clientHeight;
				}

				if (didClickOutsideSiteSearch || didClickOutsideSiteSearchForm) {

					if ($siteSearchToggle.is(':visible')) setTabIndex($siteSearchToggle);

					closeMenu();
					setTabIndex($siteSearchToggle);
					unsetTabIndex($siteSearchInput);
					unsetTabIndex($siteSearchButton);

					// If user didn't click on an element that can receive focus, then put the focus
					// on the toggle of the menu that was just closed.
					// if (!$clickTarget.is(elementsThatReceiveFocus) &&
					// 	$clickTarget.closest(elementsThatReceiveFocus).length === 0) {

					// 	$siteSearchToggle.focus();
					// }
					// The above is commented out, because if the user is clicking with the mouse
					// then focus doens't always have to be shown. Focus is mainly for keyboard users.
				}
			}
		}

		// Toggle the menu when user clicks the toggle button
		$siteSearchToggle.on('click', function (event) {
			if (isMenuOpen()) {
				closeMenu();
				setTabIndex($siteSearchToggle).focus();
				unsetTabIndex($siteSearchInput);
				unsetTabIndex($siteSearchButton);
			} else {
				openMenu();
				setTabIndex($siteSearchInput).focus();
				unsetTabIndex($siteSearchToggle);
			}

			event.preventDefault();
		});

		// Close menu if user clicked/touched outside the menu
		if (isTouch) {
			// iOS scrolling fires touchstart --> touchmove --> touchend,
			// and we need to be sure we're not registering a scroll as a click.
			var documentClick = void 0;

			$(document).on('touchstart', function () {
				documentClick = true;
			});

			$(document).on('touchmove', function () {
				documentClick = false;
			});

			$(document).on('click touchend', function (event) {
				if (event.type == "click") documentClick = true;
				if (documentClick) {
					closeMenuOnClickOutside(event);
				}
			});
		} else {
			$(document).on('click', function (event) {
				closeMenuOnClickOutside(event);
			});
		}

		/**-----------------------------------------------------------------
   *
   * 	KEYBOARD EVENTS
   *
   -----------------------------------------------------------------*/

		// Keycodes
		var enterKey = 13;
		var spaceKey = 32;
		var escKey = 27;
		var tabKey = 9;

		// MEGAMENU TOGGLE BUTTON
		$siteSearchToggle.on('keydown', function (event) {
			var pressedKey = event.which;

			// Open the menu when focus is on toggleButton & user presses enter or space key
			if (pressedKey === enterKey || pressedKey === spaceKey) {
				openMenu();
				unsetTabIndex($siteSearchToggle);
				setTabIndex($siteSearchInput).focus();

				// Prevents scrolling when space key is pressed
				event.preventDefault();
			}
		});

		$siteSearchForm.on('keydown', function (event) {
			var pressedKey = event.which;

			if (isMenuOpen() && pressedKey === escKey) {
				closeMenu();
				unsetTabIndex($siteSearchInput);
				unsetTabIndex($siteSearchButton);
				setTabIndex($siteSearchToggle).focus();
			}
		});

		$siteSearchInput.on('keydown', function (event) {
			var pressedKey = event.which;

			if (isMenuOpen() && pressedKey === tabKey) {
				unsetTabIndex($siteSearchInput);
				setTabIndex($siteSearchButton).focus();
				event.preventDefault();
			}
		});

		$siteSearchButton.on('keydown', function (event) {
			var pressedKey = event.which;

			if (isMenuOpen() && pressedKey === tabKey) {
				unsetTabIndex($siteSearchButton);
				setTabIndex($siteSearchInput).focus();
				event.preventDefault();
			}
		});

		/**
   * If dynamic search is setup (ie - the search results are updated on the page without reloading the page),
   * then clicking on the search button, or pressing enter while in the input should scroll the page
   * to the search results.
   */

		var $dynamicSiteSearch = $this.data('is-dynamic-search') === true ? $this : $();

		if ($dynamicSiteSearch.length > 0) {
			var $searchBarInput = $dynamicSiteSearch.find('input');
			var $searchBarButton = $dynamicSiteSearch.find('button');
			var $searchResults = $('#search-results');
			var $searchResultsPosition = $searchResults.length > 0 ? $searchResults.offset().top - 15 : 0;

			$searchBarInput.on('keydown', function () {
				// If enter key is pressed
				if (event.which === 13) {
					window.scrollTo(0, $searchResultsPosition);
					// Focus is set to the first item of the new page of search results by searchresults.js in Sitecore
				}
			});

			$searchBarButton.on('click', function () {
				window.scrollTo(0, $searchResultsPosition);
				// Focus is set to the first item of the new page of search results by searchresults.js in Sitecore
			});
		}
	});

	/**-----------------------------------------------------------------
  * UTILITY HEADER
  *
  * Note: utility-header.js does not modify objects in the DOM by adding
  * classes or other markup other than the following two things:
  *
  *  1. Setting aria-expanded on any button that has a drawer,
  *     depending upon whether the drawer is expanded or not.
  *
  * 	2. Changing the tabindex to 0 if a tabable item is
  * 	   focused, or -1 if not (i.e. - "roving tab index"). This feature
  * 	   currently disabled (ie - commented out).
  *
  * Author <Muir Adams - SymSoft Solutions>
  -----------------------------------------------------------------*/

	// JQuery DOM objects

	var $utilityHeader = $('.utility-header');
	var $menuItems = $utilityHeader.find('.navigation__toggle, .utility-header__drawer-toggle, .site-search__toggle, .utility-header__link, .branding a');
	var $menuItemsWithDrawers = $utilityHeader.find('.utility-header__drawer-toggle');
	var $drawers = $('.utility-header__drawer');
	var elementsThatReceiveFocus = 'a, button, input, select, textarea, [tabindex="0"]';
	var $allDrawersTabContents = $drawers.find(elementsThatReceiveFocus);

	// Conditional variables (true/false)
	var isTouch = Modernizr.touchevents;

	function isScreenXS() {
		return window.innerWidth < 768;
	}

	function isSubMenuOpen($toggle) {
		return $toggle.attr('aria-expanded') === 'true';
	}

	function doesItHaveADrawer($menuItem) {
		return $menuItem.hasClass('utility-header__drawer-toggle');
	}

	function openSubMenu($toggle) {
		var drawerId = $toggle.attr('aria-controls');
		var $drawer = $utilityHeader.find('#' + drawerId);

		$toggle.attr('aria-expanded', 'true');

		// unsetTabIndex($toggle);
		setTabIndexToDrawersFirstTabContent($toggle);
	}

	function closeSubMenu($toggle) {
		var drawerId = $toggle.attr('aria-controls');
		var $drawer = $utilityHeader.find('#' + drawerId);

		$toggle.attr('aria-expanded', 'false');

		unsetTabIndexToDrawersFirstTabContent($toggle);
		// setTabIndex($toggle);
	}

	function closeOpenSubMenus($toggle) {
		$menuItemsWithDrawers.each(function (index, toggle) {
			var $toggle = $(toggle);

			if (isSubMenuOpen($toggle)) closeSubMenu($toggle);
		});

		// Put the focus back on whichever toggle was sent as a parameter
		$toggle.focus();
	}

	function setTabIndex($menuItem) {
		$menuItem.attr('tabindex', '0');
		return $menuItem;
	}

	function unsetTabIndex($menuItem) {
		$menuItem.attr('tabindex', '-1');
		return $menuItem;
	}

	function findDrawerToggle($drawer) {
		return $utilityHeader.find('[aria-controls=' + $drawer.attr('id') + ']');
	}

	function findDrawerTabContents($drawer) {
		return $drawer.find('a, button, input, select, textarea, [tabindex="0"]');
	}

	function setTabIndexToDrawersFirstTabContent($toggle) {
		var drawerId = $toggle.attr('aria-controls');
		var $drawer = $utilityHeader.find('#' + drawerId);

		var $drawerTabContents = findDrawerTabContents($drawer);

		if ($drawerTabContents.length > 0) setTabIndex($($drawerTabContents[0])).focus();
	}

	function unsetTabIndexToDrawersFirstTabContent($toggle) {
		var drawerId = $toggle.attr('aria-controls');
		var $drawer = $utilityHeader.find('#' + drawerId);

		var $drawerTabContents = findDrawerTabContents($drawer);

		if ($drawerTabContents.length > 0) unsetTabIndex($drawerTabContents);
	}

	// Set tabindex of all menuItems - first item is 0, and the rest are -1 for roving tab index.
	// $menuItems.each(function(index, menuItem) {
	// 	const $menuItem = $(menuItem);

	// 	if (index === 0) {
	// 		setTabIndex($menuItem);
	// 	} else {
	// 		unsetTabIndex($menuItem);
	// 	}
	// });

	// Set tabindex of all drawer elements to -1 for roving tab index.
	// unsetTabIndex($allDrawersTabContents);

	/**-----------------------------------------------------------------
  *
  * 	MOUSE & TOUCH EVENTS
  *
  -----------------------------------------------------------------*/

	function closeMenuOnClickOutside(event) {
		var $clickTarget = $(event.target);
		var isClickedOutsideUtilityHeader = $clickTarget.closest('.utility-header__drawer').length === 0;
		var isClickedOutsideUtilityHeaderButton = $clickTarget.closest('.utility-header__drawer-toggle[aria-expanded="true"]').length === 0;

		if (isClickedOutsideUtilityHeader && isClickedOutsideUtilityHeaderButton) {
			var $openMenuToggle = $menuItemsWithDrawers.filter('[aria-expanded="true"]');

			// Is there a menu toggle that is expanded
			if ($openMenuToggle.length > 0) {
				closeSubMenu($openMenuToggle);

				// If user didn't click on an element that can receive focus, then put the focus
				// on the toggle of the menu that was just closed.
				if (!$clickTarget.is(elementsThatReceiveFocus) && $clickTarget.closest(elementsThatReceiveFocus).length === 0) {

					$openMenuToggle.focus();
				}
			}
		}
	}

	// Toggle the menu when user clicks the toggle button
	$menuItemsWithDrawers.on('click', function (event) {
		var $toggle = $(this);

		if (!isSubMenuOpen($toggle)) {
			closeOpenSubMenus($toggle);
			openSubMenu($toggle);
		} else {
			closeSubMenu($toggle);
			$toggle.focus();
		}

		event.preventDefault();
	});

	// Toggle tabindex when user clicks on a menu item
	// $menuItems.on('click', function(event) {
	// 	$menuItems.each(function(index, menuItem) {
	// 		if (menuItem !== event.target) {
	// 			unsetTabIndex($(menuItem));
	// 		}
	// 	});
	// });

	// Close menu if user clicked/touched outside the menu
	if (isTouch) {
		// iOS scrolling fires touchstart --> touchmove --> touchend,
		// and we need to be sure we're not registering a scroll as a click.
		var documentClick = void 0;

		$(document).on('touchstart', function () {
			documentClick = true;
		});

		$(document).on('touchmove', function () {
			documentClick = false;
		});

		$(document).on('click touchend', function (event) {
			if (event.type == "click") documentClick = true;
			if (documentClick) {
				closeMenuOnClickOutside(event);
			}
		});
	} else {
		$(document).on('click', function (event) {
			closeMenuOnClickOutside(event);
		});
	}

	/**-----------------------------------------------------------------
  *
  * 	KEYBOARD EVENTS
  *
  -----------------------------------------------------------------*/

	// Keycodes
	var enterKey = 13;
	var spaceKey = 32;
	var escKey = 27;
	var tabKey = 9;
	var downArrowKey = 40;
	var upArrowKey = 38;
	var leftArrowKey = 37;
	var rightArrowKey = 39;
	var homeKey = 36;
	var endKey = 35;

	function moveFocusToFirstItem($tabItems) {
		var $firstTabItem = $($tabItems[0]);

		// Move to the first navItem
		setTabIndex($firstTabItem).focus();
	}

	function moveFocusToLastItem($tabItems) {
		var $lastTabItem = $($tabItems[$tabItems.length - 1]);

		// Move to the last navItem
		setTabIndex($lastTabItem).focus();
	}

	function moveFocusToNextItem($tabItems, event) {
		$tabItems.each(function (index, tabItem) {
			if (tabItem === event.target) {
				var $tabItem = $(tabItem);

				// If it's the last navItem then...
				if (index === $tabItems.length - 1) {
					var $toggle = $tabItem.closest('.navigation__item').find('.navigation__item-link');
					closeSubMenu($toggle);
					setTabIndex($toggle).focus();
				} else {
					var $nextTabItem = $($tabItems[index + 1]);

					// Move tabindex to the next navItem
					setTabIndex($nextTabItem).focus();
				}
			}
		});

		// Prevents scrolling when down arrow key is pressed
		event.preventDefault();
	}

	function moveFocusToPreviousItem($tabItems, event) {
		$tabItems.each(function (index, tabItem) {

			if (tabItem === event.target) {
				var $tabItem = $(tabItem);
				// If it's the first navItem then...
				if (index === 0) {
					moveFocusToLastItem($tabItems);
				} else {
					var $prevTabItem = $($tabItems[index - 1]);
					// Move tabindex to the previous navItem
					setTabIndex($prevTabItem).focus();
				}
			}
		});

		// Prevents scrolling when down arrow key is pressed
		event.preventDefault();
	}

	function moveFocusToNextItemThatMatchesCharacter($tabItems, event) {
		$tabItems.each(function (index, tabItem) {
			if (tabItem === event.target) {
				// Find the currently focused item
				var $tabItem = $(tabItem);

				for (var i = 1; i < $tabItems.length + 1; i++) {
					var indexToSearch = (index + i) % $tabItems.length;
					var $thisTabItem = $($tabItems[indexToSearch]);
					var firstLetter = $thisTabItem.text().replace(/[^0-9a-z]/gi, '').charCodeAt(0);
					var pressedKey = event.which;

					if (pressedKey === firstLetter) {
						unsetTabIndex($tabItem);
						setTabIndex($thisTabItem).focus();
						break;
					}
				}
			}
		});
	}

	// Utility Header Menu Items
	$menuItems.on('keydown', function (event) {
		var $thisMenuItem = $(this);
		var pressedKey = event.which;

		// Move between menu items
		// if(!isSubMenuOpen($thisMenuItem)) {
		// 	if (pressedKey === homeKey) {
		// 		unsetTabIndex($thisMenuItem);
		// 		moveFocusToFirstItem($menuItems);
		// 		event.preventDefault();
		// 	}

		// 	if (pressedKey === endKey) {
		// 		unsetTabIndex($thisMenuItem);
		// 		moveFocusToLastItem($menuItems);
		// 		event.preventDefault();
		// 	}

		// 	// Moves focus to the next item having a name that starts with the typed character
		// 	if ((pressedKey >= 48 && pressedKey <= 57) || 	// 0 - 9
		// 		(pressedKey >= 65 && pressedKey <= 90)) {		// a - z

		// 		moveFocusToNextItemThatMatchesCharacter($menuItems, event);
		// 	}

		// 	// Move tabindex down the list
		// 	if (pressedKey === rightArrowKey) {
		// 		moveFocusToNextItem($menuItems, event);
		// 	}

		// 	// Move tabindex up the list
		// 	if (pressedKey === leftArrowKey) {
		// 		moveFocusToPreviousItem($menuItems, event);
		// 	}

		// 	if (pressedKey === downArrowKey ||
		// 		pressedKey === upArrowKey) event.preventDefault();
		// }

		// Open and close menu items with drawers
		if (doesItHaveADrawer($thisMenuItem)) {
			var $toggle = $thisMenuItem;

			if (pressedKey === spaceKey || pressedKey === enterKey) {

				if (!isSubMenuOpen($thisMenuItem)) {
					closeOpenSubMenus($toggle);
					openSubMenu($toggle);
				} else {
					closeSubMenu($toggle);
				}

				event.preventDefault();
			}

			if (pressedKey === escKey && isSubMenuOpen($thisMenuItem)) {
				closeSubMenu($toggle);
				$toggle.focus();
			}

			if (pressedKey === tabKey && isSubMenuOpen($thisMenuItem)) {
				event.preventDefault();
			}
		}
	});

	// Drawers
	$drawers.on('keydown', function (event) {
		var $thisDrawer = $(this);
		var $thisToggle = findDrawerToggle($thisDrawer);
		var pressedKey = event.which;

		if (pressedKey === escKey) {
			closeSubMenu($thisToggle);
			$thisToggle.focus();
		}

		if (pressedKey === tabKey) {
			event.preventDefault();
		}
	});

	// Drawers' tabable content
	$allDrawersTabContents.on('keydown', function (event) {
		var $thisContent = $(this);
		var $thisDrawer = $thisContent.closest('.utility-header__drawer');
		var $thisDrawerTabContent = findDrawerTabContents($thisDrawer);
		var pressedKey = event.which;

		if (pressedKey === tabKey) {
			if (event.shiftKey) {
				unsetTabIndex($thisContent);
				moveFocusToPreviousItem($thisDrawerTabContent, event);
				event.preventDefault();
			} else {
				unsetTabIndex($thisContent);
				moveFocusToNextItem($thisDrawerTabContent, event);
				event.preventDefault();
			}
		}
	});

};

$(document).ready(function() {
	//window.setTimeout(ccc2019, 100);
});
